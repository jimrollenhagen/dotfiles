#!/usr/bin/env python

import os
import re
import subprocess
import sys

modified = re.compile(r'^(?:MM?|A)(\s*)(?P<name>.*)')

CHECKS = [
    {
        'output': 'Checking for syntax errors...',
        'command': 'python -m py_compile %s',
        'match_files': ['\.py$'],
        'ignore_files': ['.*pre-commit'],
    },
    {
        'output': 'Checking for pdbs...',
        'command': 'grep -n "import pdb" %s',
        'match_files': ['\.py$'],
        'ignore_files': ['.*pre-commit'],
    },
    {
        'output': 'Checking for assert False...',
        'command': r'egrep -n "^[ \t]+assert False" %s',
        'match_files': ['\.py$'],
        'ignore_files': ['.*pre-commit'],
    },
    {
        'output': 'Running pylint (errors only)...',
        'command': r'! pylint \'--msg-template="{path}:{line}: [{msg_id}] {msg}" -r n\' %s | grep "\[E"',
        'match_files': ['\.py$'],
        'ignore_files': ['.*pre-commit'],
        'print_filename': False,
    },
]

def matches_file(file_name, match_files):
    return any(re.compile(match_file).search(file_name) for match_file in match_files)

def check_files(files, check):
    result = 0
    print check['output']
    for file_name in files:
        should_check = True
        if 'match_files' in check:
            should_check = should_check and matches_file(file_name, check['match_files'])
        if 'ignore_files' in check:
            should_check = should_check and not matches_file(file_name, check['ignore_files'])
        if should_check:
            process = subprocess.Popen(check['command'] % file_name, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
            out, err = process.communicate()
            if out or err:
                if check.get('print_filename', True):
                    prefix = '\t%s:' % file_name
                else:
                    prefix = '\t'
                output_lines = ['%s%s' % (prefix, line) for line in out.splitlines()]
                print '\n'.join(output_lines)
                if err:
                    print err
                result = 1
    return result

def main(all_files):
    files = []
    if all_files:
        for root, dirs, file_names in os.walk('.'):
            for file_name in file_names:
                files.append(os.path.join(root, file_name))
    else:
        p = subprocess.Popen(['git', 'status', '--porcelain'], stdout=subprocess.PIPE)
        out, err = p.communicate()
        for line in out.splitlines():
            match = modified.match(line)
            if match:
                files.append(match.group('name'))

    result = 0

    for check in CHECKS:
        result = check_files(files, check) or result

    sys.exit(result)

if __name__ == '__main__':
    all_files = False
    if len(sys.argv) > 1 and sys.argv[1] == '--all-files':
        all_files = True
    main(all_files)
